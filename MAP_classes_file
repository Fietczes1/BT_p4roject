from __future__ import absolute_import, print_function, unicode_literals

from optparse import OptionParser
import os
import time
from pprint import pformat
import sys
import dbus
import dbus.mainloop.glib
try:
  from gi.repository import GObject
except ImportError:
  import gobject as GObject

BUS_NAME='org.bluez.obex'
PATH = '/org/bluez/obex'
CLIENT_INTERFACE = 'org.bluez.obex.Client1'
SESSION_INTERFACE = 'org.bluez.obex.Session1'
MESSAGE_ACCESS_INTERFACE = 'org.bluez.obex.MessageAccess1'
MESSAGE_INTERFACE = 'org.bluez.obex.Message1'
TRANSFER_INTERFACE = 'org.bluez.obex.Transfer1'

def unwrap(x):
    """Hack to unwrap D-Bus values, so that they're easier to read when
    printed. Taken from d-feet """

    if isinstance(x, list):
        return map(unwrap, x)

    if isinstance(x, tuple):
        return tuple(map(unwrap, x))

    if isinstance(x, dict):
        return dict([(unwrap(k), unwrap(v)) for k, v in x.iteritems()])

    for t in [unicode, str, long, int, float, bool]:
        if isinstance(x, t):
            return t(x)

    return x


def set_folder(session, new_dir):
    print("ustawiam nowy katalog")
    session.SetFolder(new_dir)

class MapClient:
    def __init__(self, session_path, verbose=False):
        self.progress = 0
		self.transfer_path = None
		self.props = dict()
		self.verbose = verbose
		self.path = session_path
		bus = dbus.SessionBus()
		obj = bus.get_object(BUS_NAME, session_path)
		self.session = dbus.Interface(obj, SESSION_INTERFACE)
		self.map = dbus.Interface(obj, MESSAGE_ACCESS_INTERFACE)
        bus.add_signal_receiver(self.properties_changed, dbus_interface="org.freedesktop.DBus.Properties", signal_name="PropertiesChanged", path_keyword="path")

    def create_transfer_reply(self, path, properties):
        self.transfer_path = path
        self.props[path] = properties
        if self.verbose:
            print("Transfer created: %s (file %s)" % (path, properties["Filename"]))

    def generic_reply(self):
        if self.verbose:
            print("Operation succeeded")

    def error(self, err):
        print(err)
        #mainloop.quit()

    def transfer_complete(self, path):
        if self.verbose:
            print("Transfer finished")
        properties = self.props.get(path)
        if properties == None:
            return
        f = open(properties["Filename"], "r")
        os.remove(properties["Filename"])
        print(f.readlines())

    def transfer_error(self, path):
        print("Transfer %s error" % path)
        #mainloop.quit()

    def properties_changed(self, interface, properties, invalidated, path):
        req = self.props.get(path)
        if req == None:
            return

        if properties['Status'] == 'complete':
            self.transfer_complete(path)
            return

        if properties['Status'] == 'error':
            self.transfer_error(path)
            return

    def set_folder(self, new_dir):
        self.map.SetFolder(new_dir)

    def list_folders(self):
        for i in self.map.ListFolders(dict()):
            print("%s/" % (i["Name"]))

    def list_messages(self, folder):
        ret = self.map.ListMessages(folder, dict())
        print(pformat(unwrap(ret)))

    def get_message(self, handle):
        self.map.ListMessages("", dict())
        path = self.path + "/message" + handle
        obj = bus.get_object(BUS_NAME, path)
        msg = dbus.Interface(obj, MESSAGE_INTERFACE)
        msg.Get("", True, reply_handler=self.create_transfer_reply, error_handler=self.error)

    def push_message(self, filename):
        self.map.PushMessage(filename, "telecom/msg/outbox", dict(), reply_handler=self.create_transfer_reply, error_handler=self.error)

    def get_message_properties(self, handle):
        self.map.ListMessages("", dict())
        path = self.path + "/message" + handle
        obj = bus.get_object(BUS_NAME, path)
        msg = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
        ret = msg.GetAll(MESSAGE_INTERFACE)
        print(pformat(unwrap(ret)))

    def set_message_property(self, handle, prop, flag):
        self.map.ListMessages("", dict())
        path = self.path + "/message" + handle
        obj = bus.get_object(BUS_NAME, path)
        msg = dbus.Interface(obj, MESSAGE_INTERFACE)
        msg.SetProperty (prop, flag);

    def update_inbox(self):
        self.map.UpdateInbox()

